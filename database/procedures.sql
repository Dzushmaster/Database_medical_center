DROP PROCEDURE CHECK_LOGIN;
create or replace PROCEDURE CREATOR.CHECK_LOGIN(
    LOGIN IN USER_.LOGIN%TYPE,
    RESULT_ IN OUT NUMBER
    )
IS
CURSOR USER_LOGIN (LOGIN_ USER_.LOGIN%TYPE) IS SELECT USER_.LOGIN FROM USER_ WHERE USER_.LOGIN = LOGIN_; 
CURSOR DOCTOR_LOGIN (LOGIN_ DOCTOR.LOGIN%TYPE) IS SELECT DOCTOR.LOGIN FROM DOCTOR WHERE DOCTOR.LOGIN = LOGIN_;
LOGIN_US USER_.LOGIN%TYPE;
LOGIN_DOC DOCTOR.LOGIN%TYPE;
BEGIN

    OPEN USER_LOGIN(LOGIN);
    FETCH USER_LOGIN INTO LOGIN_US;
    IF USER_LOGIN%ROWCOUNT !=0
    THEN
        RESULT_:=1;
        RETURN;
    ELSE
        RESULT_:=0;
    END IF;
    CLOSE USER_LOGIN;

    OPEN DOCTOR_LOGIN(LOGIN);
    FETCH DOCTOR_LOGIN INTO LOGIN_DOC;
    IF DOCTOR_LOGIN%ROWCOUNT !=0
    THEN
        RESULT_:=2;
    ELSE
        RESULT_:=0;
    END IF;
    CLOSE DOCTOR_LOGIN;

END CHECK_LOGIN;

-------------------------------------------------------------------------------------------------------------------------------------------
--FOR REGISTER EMAIL

DROP PROCEDURE CHECK_EMAIL;
create or replace PROCEDURE CREATOR.CHECK_EMAIL(
    EMAIL IN USER_.EMAIL%TYPE,
    RESULT_ IN OUT BOOLEAN
    )
IS
CURSOR USER_EMAIL(EMAIL_ USER_.EMAIL%TYPE) IS SELECT USER_.EMAIL FROM USER_ WHERE USER_.EMAIL = EMAIL_; 
CURSOR DOCTOR_EMAIL (EMAIL_ DOCTOR.EMAIL%TYPE)IS SELECT DOCTOR.EMAIL FROM DOCTOR WHERE DOCTOR.LOGIN = EMAIL_;
EMAIL_US USER_.EMAIL%TYPE;
EMAIL_DOC DOCTOR.EMAIL%TYPE;
BEGIN
    OPEN USER_EMAIL(EMAIL);
    FETCH USER_EMAIL INTO EMAIL_US;
    RESULT_ := USER_EMAIL%ROWCOUNT != 0;
    CLOSE USER_EMAIL;
    
    IF RESULT_ = TRUE
    THEN
        RETURN;
    END IF;

    OPEN DOCTOR_EMAIL(EMAIL);
    FETCH DOCTOR_EMAIL INTO EMAIL_DOC;
    RESULT_ := DOCTOR_EMAIL%ROWCOUNT != 0;
    CLOSE DOCTOR_EMAIL;
    
END CHECK_EMAIL;

-------------------------------------------------------------------------------------------------------------------------------------------


DROP PROCEDURE CHECK_PASSWORD;
create or replace PROCEDURE CREATOR.CHECK_PASSWORD(
                                LOGIN IN USER_.LOGIN%TYPE,
                                PASSWORD IN USER_.PASSWORD%TYPE,
                                RESULT_ IN OUT NUMBER
                                )
IS
CURSOR USER_LOG_PS (LOGIN_ USER_.LOGIN%TYPE, PASSWORD_ USER_.PASSWORD%TYPE) 
    IS SELECT USER_.LOGIN FROM USER_ WHERE USER_.LOGIN = LOGIN_ 
    AND  USER_.PASSWORD = PASSWORD_; 
CURSOR DOCTOR_LOG_PS (LOGIN_ DOCTOR.LOGIN%TYPE, PASSWORD_ DOCTOR.PASSWORD%TYPE)
    IS SELECT DOCTOR.LOGIN FROM DOCTOR WHERE DOCTOR.LOGIN = LOGIN_
    AND DOCTOR.PASSWORD = PASSWORD_;

LOG_PS_US USER_LOG_PS%ROWTYPE;
LOG_PS_DOC DOCTOR_LOG_PS%ROWTYPE;

BEGIN

    OPEN USER_LOG_PS(LOGIN, PASSWORD);
    FETCH USER_LOG_PS INTO LOG_PS_US;
    IF USER_LOG_PS%ROWCOUNT !=0
    THEN
        RESULT_:=1;
        RETURN;
    ELSE
        RESULT_:=0;
    END IF;
    CLOSE USER_LOG_PS;

    OPEN DOCTOR_LOG_PS(LOGIN, PASSWORD);
    FETCH DOCTOR_LOG_PS INTO LOG_PS_DOC;
    IF DOCTOR_LOG_PS%ROWCOUNT !=0
    THEN
        RESULT_:=2;
    ELSE
        RESULT_:=0;
    END IF;
    CLOSE DOCTOR_LOG_PS;
END CHECK_PASSWORD;

-------------------------------------------------------------------------------------------------------------------------------------------

DROP PROCEDURE INSERT_USER;
CREATE OR REPLACE PROCEDURE CREATOR.INSERT_USER (FULLNAME USER_.FULLNAME%TYPE, BIRTHDATE USER_.BIRTH_DATE%TYPE, EMAIL USER_.EMAIL%TYPE,
        LOGIN USER_.LOGIN%TYPE, PASSWORD_ USER_.PASSWORD%TYPE, RESULT_ OUT NUMBER)
AS
BEGIN
    INSERT INTO USER_ VALUES(
        USER_ID.NEXTVAL,
        FULLNAME,
        BIRTHDATE,
        EMAIL,
        LOGIN,
        PASSWORD_);
    RESULT_ := USER_ID.CURRVAL;
    COMMIT;
    RETURN;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            RESULT_ := -1;
            ROLLBACK;
END INSERT_USER;

-------------------------------------------------------------------------------------------------------------------------------------------

DROP PROCEDURE INSERT_DOCTOR;
CREATE OR REPLACE PROCEDURE CREATOR.INSERT_DOCTOR (FULLNAME DOCTOR.FULL_NAME%TYPE, SPECIALITY DOCTOR.SPECIALITY%TYPE, EMAIL DOCTOR.EMAIL%TYPE,
        LOGIN DOCTOR.LOGIN%TYPE, PASSWORD_ DOCTOR.PASSWORD%TYPE,  RESULT_ OUT NUMBER)
AS
BEGIN
    INSERT INTO DOCTOR VALUES(
        DOCTOR_ID.NEXTVAL,
        FULLNAME,
        SPECIALITY,
        EMAIL,
        LOGIN,
        PASSWORD_);
    RESULT_ := DOCTOR_ID.CURRVAL;
    COMMIT;
    RETURN;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            RESULT_ := -1;
            ROLLBACK;
END INSERT_DOCTOR;

-------------------------------------------------------------------------------------------------------------------------------------------

DROP PROCEDURE CREATOR.GET_HISE_BY_FULLNAME(FULLNAME

CREATE OR REPLACE FUNCTION CREATOR.GET_HIST_BY_FULLNAME (FULLNAME_ USER_.FULLNAME%TYPE) RETURN SYS_REFCURSOR
IS
    HIST_CURS SYS_REFCURSOR;
BEGIN
    OPEN HIST_CURS FOR 
    Q'[SELECT USER_.FULLNAME, DOCTOR.FULL_NAME, HEALTH.DATE_TIME_VISITE, 
    DESIASE.SYMPTOMES, DESIASE.THERAPY, DESIASE.RESULT_DESIASE 
    FROM HEALTH 
    JOIN DESIASE ON DESIASE.ID_VISITE = HEALTH.ID_VISITE
    JOIN USER_ ON HEALTH.ID_USER = USER_.ID_USER
    JOIN DOCTOR ON HEALTH.ID_DOCTOR = DOCTOR.ID_DOCTOR
    WHERE USER_.FULLNAME LIKE('%' || FULLNAME || '%')]';  
    RETURN HIST_CURS;
END;
